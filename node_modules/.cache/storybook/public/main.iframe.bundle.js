(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["main"],{

/***/ "./.storybook/preview.js":
/*!*******************************!*\
  !*** ./.storybook/preview.js ***!
  \*******************************/
/*! exports provided: parameters */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parameters", function() { return parameters; });
!(function webpackMissingModule() { var e = new Error("Cannot find module 'degen/styles'"); e.code = 'MODULE_NOT_FOUND'; throw e; }());

var parameters = {
  actions: {
    argTypesRegex: "^on[A-Z].*"
  },
  controls: {
    matchers: {
      color: /(background|color)$/i,
      date: /Date$/
    }
  }
};

/***/ }),

/***/ "./.storybook/preview.js-generated-config-entry.js":
/*!*********************************************************!*\
  !*** ./.storybook/preview.js-generated-config-entry.js ***!
  \*********************************************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.object.keys.js */ "./node_modules/core-js/modules/es.object.keys.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.array.filter.js */ "./node_modules/core-js/modules/es.array.filter.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.object.get-own-property-descriptor.js */ "./node_modules/core-js/modules/es.object.get-own-property-descriptor.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.object.get-own-property-descriptors.js */ "./node_modules/core-js/modules/es.object.get-own-property-descriptors.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_define_properties_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.object.define-properties.js */ "./node_modules/core-js/modules/es.object.define-properties.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_define_properties_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_define_properties_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_storybook_client_api__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./node_modules/@storybook/client-api */ "./node_modules/@storybook/client-api/dist/esm/ClientApi.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_storybook_client_logger__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./node_modules/@storybook/client-logger */ "./node_modules/@storybook/client-logger/dist/esm/index.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_storybook_preview_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./.storybook/preview.js */ "./.storybook/preview.js");










function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}
/* eslint-disable import/no-unresolved */





Object.keys(_Users_kirill_Desktop_mirrorblocks_storybook_preview_js__WEBPACK_IMPORTED_MODULE_11__).forEach(function (key) {
  var value = _Users_kirill_Desktop_mirrorblocks_storybook_preview_js__WEBPACK_IMPORTED_MODULE_11__[key];

  switch (key) {
    case 'args':
    case 'argTypes':
      {
        return _Users_kirill_Desktop_mirrorblocks_node_modules_storybook_client_logger__WEBPACK_IMPORTED_MODULE_10__[/* logger */ "a"].warn('Invalid args/argTypes in config, ignoring.', JSON.stringify(value));
      }

    case 'decorators':
      {
        return value.forEach(function (decorator) {
          return Object(_Users_kirill_Desktop_mirrorblocks_node_modules_storybook_client_api__WEBPACK_IMPORTED_MODULE_9__[/* addDecorator */ "d"])(decorator, false);
        });
      }

    case 'loaders':
      {
        return value.forEach(function (loader) {
          return Object(_Users_kirill_Desktop_mirrorblocks_node_modules_storybook_client_api__WEBPACK_IMPORTED_MODULE_9__[/* addLoader */ "e"])(loader, false);
        });
      }

    case 'parameters':
      {
        return Object(_Users_kirill_Desktop_mirrorblocks_node_modules_storybook_client_api__WEBPACK_IMPORTED_MODULE_9__[/* addParameters */ "f"])(_objectSpread({}, value), false);
      }

    case 'argTypesEnhancers':
      {
        return value.forEach(function (enhancer) {
          return Object(_Users_kirill_Desktop_mirrorblocks_node_modules_storybook_client_api__WEBPACK_IMPORTED_MODULE_9__[/* addArgTypesEnhancer */ "b"])(enhancer);
        });
      }

    case 'argsEnhancers':
      {
        return value.forEach(function (enhancer) {
          return Object(_Users_kirill_Desktop_mirrorblocks_node_modules_storybook_client_api__WEBPACK_IMPORTED_MODULE_9__[/* addArgsEnhancer */ "c"])(enhancer);
        });
      }

    case 'render':
      {
        return Object(_Users_kirill_Desktop_mirrorblocks_node_modules_storybook_client_api__WEBPACK_IMPORTED_MODULE_9__[/* setGlobalRender */ "g"])(value);
      }

    case 'globals':
    case 'globalTypes':
      {
        var v = {};
        v[key] = value;
        return Object(_Users_kirill_Desktop_mirrorblocks_node_modules_storybook_client_api__WEBPACK_IMPORTED_MODULE_9__[/* addParameters */ "f"])(v, false);
      }

    case '__namedExportsOrder':
    case 'decorateStory':
    case 'renderToDOM':
      {
        return null; // This key is not handled directly in v6 mode.
      }

    default:
      {
        // eslint-disable-next-line prefer-template
        return console.log(key + ' was not supported :( !');
      }
  }
});

/***/ }),

/***/ "./generated-stories-entry.js":
/*!************************************!*\
  !*** ./generated-stories-entry.js ***!
  \************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

var _frameworkImportPath = __webpack_require__(/*! @storybook/react */ "./node_modules/@storybook/react/dist/esm/client/index.js");
/* eslint-disable import/no-unresolved */


(0, _frameworkImportPath.configure)([__webpack_require__("./src sync recursive ^\\.(?:(?:^|\\/|(?:(?:(?!(?:^|\\/)\\.).)*?)\\/)(?!\\.)(?=.)[^/]*?\\.stories\\.mdx)$"), __webpack_require__("./src sync recursive ^\\.(?:(?:^|\\/|(?:(?:(?!(?:^|\\/)\\.).)*?)\\/)(?!\\.)(?=.)[^/]*?\\.stories\\.(js|jsx|ts|tsx))$")], module, false);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./src sync recursive ^\\.(?:(?:^|\\/|(?:(?:(?!(?:^|\\/)\\.).)*?)\\/)(?!\\.)(?=.)[^/]*?\\.stories\\.(js|jsx|ts|tsx))$":
/*!**********************************************************************************************************!*\
  !*** ./src sync ^\.(?:(?:^|\/|(?:(?:(?!(?:^|\/)\.).)*?)\/)(?!\.)(?=.)[^/]*?\.stories\.(js|jsx|ts|tsx))$ ***!
  \**********************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./stories/index.stories.tsx": "./src/stories/index.stories.tsx"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./src sync recursive ^\\.(?:(?:^|\\/|(?:(?:(?!(?:^|\\/)\\.).)*?)\\/)(?!\\.)(?=.)[^/]*?\\.stories\\.(js|jsx|ts|tsx))$";

/***/ }),

/***/ "./src sync recursive ^\\.(?:(?:^|\\/|(?:(?:(?!(?:^|\\/)\\.).)*?)\\/)(?!\\.)(?=.)[^/]*?\\.stories\\.mdx)$":
/*!**********************************************************************************************!*\
  !*** ./src sync ^\.(?:(?:^|\/|(?:(?:(?!(?:^|\/)\.).)*?)\/)(?!\.)(?=.)[^/]*?\.stories\.mdx)$ ***!
  \**********************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./stories/Introduction.stories.mdx": "./src/stories/Introduction.stories.mdx"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./src sync recursive ^\\.(?:(?:^|\\/|(?:(?:(?!(?:^|\\/)\\.).)*?)\\/)(?!\\.)(?=.)[^/]*?\\.stories\\.mdx)$";

/***/ }),

/***/ "./src/components/Crowdfund.tsx":
/*!**************************************!*\
  !*** ./src/components/Crowdfund.tsx ***!
  \**************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _fetcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../fetcher */ "./src/fetcher.tsx");
/* harmony import */ var swr__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! swr */ "./node_modules/swr/dist/index.esm.js");
/* harmony import */ var degen__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! degen */ "./node_modules/degen/dist/index.es.js");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__);







var fetcher = function fetcher(address) {
  return Object(_fetcher__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])('query')({
    crowdfundAtAddress: [{
      address: address
    }, {
      name: true,
      symbol: true,
      fundingRecipient: true,
      goal: true,
      publishStatus: true,
      createdAt: true
    }]
  });
};

var Crowdfund = function Crowdfund(_ref) {
  var address = _ref.address;

  var _useSWR = Object(swr__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"])(address, fetcher),
      data = _useSWR.data,
      error = _useSWR.error,
      isValidating = _useSWR.isValidating;

  if (isValidating) {
    return /*#__PURE__*/Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
      children: "Loading..."
    });
  }

  if (error) {
    return /*#__PURE__*/Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__["jsxs"])("div", {
      children: ["Error! ", error.message]
    });
  }

  return /*#__PURE__*/Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__["jsxs"])(degen__WEBPACK_IMPORTED_MODULE_3__[/* Stack */ "c"], {
    align: "center",
    children: [/*#__PURE__*/Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__["jsx"])(degen__WEBPACK_IMPORTED_MODULE_3__[/* Button */ "a"], {
      prefix: /*#__PURE__*/Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__["jsx"])(degen__WEBPACK_IMPORTED_MODULE_3__[/* IconLockClosed */ "b"], {}),
      variant: "primary",
      width: {
        xs: 'full',
        md: 'max'
      },
      children: "Fetch"
    }), JSON.stringify(data)]
  });
};

Crowdfund.displayName = "Crowdfund";
/* harmony default export */ __webpack_exports__["a"] = (Crowdfund);

try {
    // @ts-ignore
    Crowdfund.displayName = "Crowdfund";
    // @ts-ignore
    Crowdfund.__docgenInfo = { "description": "", "displayName": "Crowdfund", "props": { "address": { "defaultValue": null, "description": "", "name": "address", "required": true, "type": { "name": "string" } } } };
    // @ts-ignore
    if (typeof STORYBOOK_REACT_CLASSES !== "undefined")
        // @ts-ignore
        STORYBOOK_REACT_CLASSES["src/components/Crowdfund.tsx#Crowdfund"] = { docgenInfo: Crowdfund.__docgenInfo, name: "Crowdfund", path: "src/components/Crowdfund.tsx#Crowdfund" };
}
catch (__react_docgen_typescript_loader_error) { }


/***/ }),

/***/ "./src/fetcher.tsx":
/*!*************************!*\
  !*** ./src/fetcher.tsx ***!
  \*************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _zeus__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./zeus */ "./src/zeus/index.ts");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }




var thunder = Object(_zeus__WEBPACK_IMPORTED_MODULE_2__[/* Thunder */ "a"])( /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(query) {
    var response, json;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return fetch('https://mirror-api.com/graphql', {
              body: JSON.stringify({
                query: query
              }),
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              }
            });

          case 2:
            response = _context.sent;

            if (response.ok) {
              _context.next = 5;
              break;
            }

            return _context.abrupt("return", new Promise(function (resolve, reject) {
              response.text().then(function (text) {
                try {
                  reject(JSON.parse(text));
                } catch (err) {
                  reject(text);
                }
              })["catch"](reject);
            }));

          case 5:
            _context.next = 7;
            return response.json();

          case 7:
            json = _context.sent;
            return _context.abrupt("return", json.data);

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());
/* harmony default export */ __webpack_exports__["a"] = (thunder);

try {
    // @ts-ignore
    fetcher.displayName = "fetcher";
    // @ts-ignore
    fetcher.__docgenInfo = { "description": "", "displayName": "fetcher", "props": {} };
    // @ts-ignore
    if (typeof STORYBOOK_REACT_CLASSES !== "undefined")
        // @ts-ignore
        STORYBOOK_REACT_CLASSES["src/fetcher.tsx#fetcher"] = { docgenInfo: fetcher.__docgenInfo, name: "fetcher", path: "src/fetcher.tsx#fetcher" };
}
catch (__react_docgen_typescript_loader_error) { }


/***/ }),

/***/ "./src/index.tsx":
/*!***********************!*\
  !*** ./src/index.tsx ***!
  \***********************/
/*! exports provided: Crowdfund */
/*! exports used: Crowdfund */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _components_Crowdfund__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/Crowdfund */ "./src/components/Crowdfund.tsx");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _components_Crowdfund__WEBPACK_IMPORTED_MODULE_0__["a"]; });




try {
    // @ts-ignore
    Crowdfund.displayName = "Crowdfund";
    // @ts-ignore
    Crowdfund.__docgenInfo = { "description": "", "displayName": "Crowdfund", "props": { "address": { "defaultValue": null, "description": "", "name": "address", "required": true, "type": { "name": "string" } } } };
    // @ts-ignore
    if (typeof STORYBOOK_REACT_CLASSES !== "undefined")
        // @ts-ignore
        STORYBOOK_REACT_CLASSES["src/index.tsx#Crowdfund"] = { docgenInfo: Crowdfund.__docgenInfo, name: "Crowdfund", path: "src/index.tsx#Crowdfund" };
}
catch (__react_docgen_typescript_loader_error) { }


/***/ }),

/***/ "./src/stories/Introduction.stories.mdx":
/*!**********************************************!*\
  !*** ./src/stories/Introduction.stories.mdx ***!
  \**********************************************/
/*! exports provided: __page, default */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__page", function() { return __page; });
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.object.keys.js */ "./node_modules/core-js/modules/es.object.keys.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_assign_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.object.assign.js */ "./node_modules/core-js/modules/es.object.assign.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_assign_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_assign_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mdx-js/react */ "./node_modules/@mdx-js/react/dist/esm.js");
/* harmony import */ var _storybook_addon_docs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @storybook/addon-docs */ "./node_modules/@storybook/addon-docs/dist/esm/index.js");
/* harmony import */ var _storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @storybook/addon-docs/blocks */ "./node_modules/@storybook/addon-docs/blocks.js");



var _excluded = ["components"];


function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }



/* @jsxRuntime classic */

/* @jsx mdx */



var layoutProps = {};
var MDXLayout = "wrapper";

function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__[/* mdx */ "b"])(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: "MDXLayout"
  }), Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__[/* mdx */ "b"])(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_7__[/* Meta */ "a"], {
    mdxType: "Meta"
  }, "Hey"), Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__[/* mdx */ "b"])("h1", {
    "id": "hey"
  }, "Hey"));
}

MDXContent.displayName = "MDXContent";
;
MDXContent.isMDXComponent = true;
var __page = function __page() {
  throw new Error("Docs-only story");
};
__page.parameters = {
  docsOnly: true
};
var componentMeta = {
  includeStories: ["__page"]
};
var mdxStoryNameToKey = {};
componentMeta.parameters = componentMeta.parameters || {};
componentMeta.parameters.docs = Object.assign({}, componentMeta.parameters.docs || {}, {
  page: function page() {
    return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__[/* mdx */ "b"])(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_6__[/* AddContext */ "a"], {
      mdxStoryNameToKey: mdxStoryNameToKey,
      mdxComponentAnnotations: componentMeta
    }, Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_5__[/* mdx */ "b"])(MDXContent, null));
  }
});
/* harmony default export */ __webpack_exports__["default"] = (componentMeta);

/***/ }),

/***/ "./src/stories/index.stories.tsx":
/*!***************************************!*\
  !*** ./src/stories/index.stories.tsx ***!
  \***************************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _storybook_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @storybook/react */ "./node_modules/@storybook/react/dist/esm/client/index.js");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ */ "./src/index.tsx");
/* harmony import */ var degen__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! degen */ "./node_modules/degen/dist/index.es.js");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__);
/* eslint-disable */
// @ts-nocheck
// @ts-ignore
var __STORY__ = "import React from \"react\";\nimport { storiesOf } from \"@storybook/react\";\nimport { Crowdfund } from '../'\nimport { ThemeProvider } from 'degen'\n\nstoriesOf(\"Crowdfund\", module)\n    .add(\"default\", () => <ThemeProvider><Crowdfund address=\"0xCCac1187F4439E6ff02De97B16fF40BD2E7c8080\" /></ThemeProvider>);"; // @ts-ignore

var __LOCATIONS_MAP__ = {
  "default": {
    "startLoc": {
      "col": 9,
      "line": 7
    },
    "endLoc": {
      "col": 123,
      "line": 7
    },
    "startBody": {
      "col": 20,
      "line": 7
    },
    "endBody": {
      "col": 123,
      "line": 7
    }
  }
};





Object(_storybook_react__WEBPACK_IMPORTED_MODULE_1__["storiesOf"])("Crowdfund", module).addParameters({
  storySource: {
    source: __STORY__,
    locationsMap: __LOCATIONS_MAP__
  }
}).add("default", function () {
  return /*#__PURE__*/Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__["jsx"])(degen__WEBPACK_IMPORTED_MODULE_3__[/* ThemeProvider */ "d"], {
    children: /*#__PURE__*/Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__["jsx"])(___WEBPACK_IMPORTED_MODULE_2__[/* Crowdfund */ "a"], {
      address: "0xCCac1187F4439E6ff02De97B16fF40BD2E7c8080"
    })
  });
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./src/zeus/const.ts":
/*!***************************!*\
  !*** ./src/zeus/const.ts ***!
  \***************************/
/*! exports provided: AllTypesProps, ReturnTypes */
/*! exports used: AllTypesProps, ReturnTypes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AllTypesProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return ReturnTypes; });
/* eslint-disable */
var AllTypesProps = {
  ColorModeType: "enum",
  AccentType: "enum",
  query: {
    publication: {
      ensLabel: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      publicOnly: {
        type: "Boolean",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    publicationFeed: {
      ensLabel: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      publicOnly: {
        type: "Boolean",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    publicationContributors: {
      ensLabel: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    contributor: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    contributorsByAddress: {
      addresses: {
        type: "String",
        array: true,
        arrayRequired: false,
        required: false
      }
    },
    entry: {
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    entries: {
      publicOnly: {
        type: "Boolean",
        array: false,
        arrayRequired: false,
        required: false
      },
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    resolveENS: {
      name: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    lookupENS: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    addressInfo: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    publicationSettings: {
      publicationLabel: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    verifiedAccount: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    isVerified: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    verifiedAccountsAfterTimestamp: {
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    registrationEvent: {
      ensLabel: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    votingPower: {
      account: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    verifiedVotesByRound: {
      round: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      limit: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      offset: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    crowdfunds: {
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    droppedCrowdfunds: {
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    crowdfundAtAddress: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    crowdfundBlockData: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    crowdfundEntries: {
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      ensLabel: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    nfts: {
      contributorAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    nft: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      tokenId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    reserveAuctions: {
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    reserveAuction: {
      nftAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      tokenId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      auctionId: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    socialProfile: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    twitterProfile: {
      username: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    twitterProfilesById: {
      ids: {
        type: "Int",
        array: true,
        arrayRequired: false,
        required: false
      }
    },
    splits: {
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    split: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    editions: {
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    edition: {
      editionId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      editionContractAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    userActivityFeed: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    email: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    crowdfundEvents: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    userProfile: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    me: {
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    verifyPublicKey: {
      publicKey: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    address: {
      publicKey: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    mirrorProject: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    hasUserSubmittedSurvey: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      surveyId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    getSurvey: {
      surveyId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      crowdfundAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    crowdfundDraftById: {
      id: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    proposals: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    proposal: {
      cid: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    proposalVotingPower: {
      cid: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    proposalEntryVotes: {
      proposalCid: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      proposalEntryCid: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    writeRaceSearch: {
      usernameOrAccount: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      roundNumber: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    writeRaceVotingPower: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      roundNumber: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    writeRaceCurrentUser: {
      account: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      roundNumber: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    writeRaceCurrentRound: {
      limit: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      offset: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    writeRaceLeaderboard: {
      round: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    mirrorPoll: {
      id: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    mirrorPollCanRespond: {
      pollId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    mirrorPollUser: {
      pollId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    dutchAuction: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    editionOpenSale: {
      id: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    mirrorERC20Tokens: {
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    mirrorERC20TokenAtAddress: {
      tokenAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    crowdfundTokenApprovalMetadata: {
      crowdfundAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    projectFeed: {
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    plugins: {
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    }
  },
  VerificationStatusEnum: "enum",
  MirrorPollStatusEnum: "enum",
  DutchAuctionStatusType: "enum",
  mutations: {
    registerContributor: {
      contributorEthAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      publicationDisplayName: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      publicationENSLabel: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      publicationAvatarURL: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      contributorDisplayName: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      contributorAvatarURL: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signingKey: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      ethSignature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    registerContributorForPublication: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      ensLabel: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      displayName: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      avatarURL: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signingKey: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      ethSignature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    updateContributorSettings: {
      contributorAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      settings: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    removeContributor: {
      contributorAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      ensLabel: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      contractAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      transactionHash: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      network: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    changeEntryStatus: {
      originalDigest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      status: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    createEntry: {
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      title: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      body: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      status: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      nftId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      entryContributorAddresses: {
        type: "String",
        array: true,
        arrayRequired: false,
        required: false
      },
      featuredImageId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      hideTitleInEntry: {
        type: "Boolean",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    addSigningKey: {
      ethAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      publicKey: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    addNonMemberSigningKey: {
      ethAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      publicKey: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    _testSigning: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    updateEntry: {
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      originalDigest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      title: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      body: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      ensLabel: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      status: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      nftId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      entryContributorAddresses: {
        type: "String",
        array: true,
        arrayRequired: false,
        required: false
      },
      featuredImageId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      hideTitleInEntry: {
        type: "Boolean",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    updateSettings: {
      publicationLabel: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      publicationDisplayName: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      publicationAvatarURL: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      contributorDisplayName: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      contributorAvatarURL: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    updatePublicationSettings: {
      publicationLabel: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      settings: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      contributorAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    verifyTweet: {
      tweetId: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      account: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    verifyTweetV2: {
      username: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      account: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    removeTwitter: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    saveRegistrationEvent: {
      ensLabel: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      account: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      transactionHash: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    verifyVote: {
      candidate: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      round: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      account: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      amount: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    createCrowdfund: {
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      name: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      symbol: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      description: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      baseURI: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      tokenAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      publishStatus: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      fundingRecipient: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      goal: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      stretchGoal: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      network: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      endsAt: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      version: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      transactionHash: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      contributionLimit: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      operator: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      operatorEquityPercent: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      editions: {
        type: "EditionForSignatureType",
        array: true,
        arrayRequired: false,
        required: false
      },
      crowdfundDraftId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      content: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      metadata: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      title: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      exchangeRate: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    setCrowdfundTransactionHash: {
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      crowdfundAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      transactionHash: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    updateCrowdfund: {
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      content: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    updateCrowdfundPublishStatus: {
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      crowdfundAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      publishStatus: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    createNFT: {
      name: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      tokenURI: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      contributorAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      contentHash: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      network: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      tokenId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      transactionHash: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      entryDigest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    createReserveAuction: {
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      name: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      tokenId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      duration: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      nftAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      fundsRecipientAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      curatorAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      curatorFee: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      version: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      reservePrice: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      network: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      transactionHash: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      auctionId: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    createPromptResponse: {
      content: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      respondentId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      contentHash: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    createSplit: {
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      name: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      transactionHash: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      network: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    createSplitAllocations: {
      splitAllocations: {
        type: "SplitAllocationInputType",
        array: true,
        arrayRequired: false,
        required: false
      }
    },
    createEdition: {
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      title: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      quantity: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      price: {
        type: "Float",
        array: false,
        arrayRequired: false,
        required: false
      },
      artifactThumbnailId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      artifactPrimaryId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      fundingRecipient: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      network: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      transactionHash: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      description: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      editionContractAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      version: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      singleArtifact: {
        type: "Boolean",
        array: false,
        arrayRequired: false,
        required: false
      },
      crowdfundAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      contentHash: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      baseUriHash: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    createCrowdfundEditions: {
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      editions: {
        type: "EditionInputType",
        array: true,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      fundingRecipient: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      network: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      transactionHash: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      editionContractAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      version: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      crowdfundAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    createEntryEditions: {
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      editions: {
        type: "EditionInputType",
        array: true,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      fundingRecipient: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      network: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      transactionHash: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      editionContractAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      version: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      entryId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    setEditionTransactionHash: {
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      ids: {
        type: "Int",
        array: true,
        arrayRequired: false,
        required: false
      },
      transactionHash: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      fundingRecipient: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      network: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    setEditionTransactionHashWithUserProfile: {
      ids: {
        type: "Int",
        array: true,
        arrayRequired: false,
        required: false
      },
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      transactionHash: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      fundingRecipient: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      network: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    createMediaAsset: {
      mimetype: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      sizes: {
        type: "MediaAssetSizesInputType",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    addEmail: {
      email: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    verifyEmail: {
      token: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    setWriteRaceNotification: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      value: {
        type: "Boolean",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    createUserProfile: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      displayName: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      avatarURL: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    updateUserProfile: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      settings: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    updateUserProfileTheme: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      colorMode: {
        type: "ColorModeType",
        array: false,
        arrayRequired: false,
        required: false
      },
      accent: {
        type: "AccentType",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    relinkEns: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    setUserProfileHeaderImage: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      headerImageId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    addSurveyResponse: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      content: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      surveyId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      contentHash: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      crowdfundAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    createCrowdfundDraft: {
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      data: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    editCrowdfundDraft: {
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      id: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      data: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    deleteCrowdfundDraft: {
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      id: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    createOrUpdateCrowdfundDraft: {
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      id: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      data: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    setCrowdfundIdForCrowdfundDraft: {
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      id: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      crowdfundId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    createProposal: {
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      title: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      description: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      erc20Address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      erc721Address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      tokenIds: {
        type: "String",
        array: true,
        arrayRequired: false,
        required: false
      },
      coverImageId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      tokenThreshold: {
        type: "Float",
        array: false,
        arrayRequired: false,
        required: false
      },
      startDate: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      endDate: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      prompt: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      highlightedWinners: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      entries: {
        type: "ProposalEntryInput",
        array: true,
        arrayRequired: false,
        required: false
      },
      erc721Multiplier: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    cancelProposal: {
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      cid: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    voteOnProposal: {
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      proposalCid: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      proposalEntryCid: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      votes: {
        type: "Float",
        array: false,
        arrayRequired: false,
        required: false
      },
      multisigAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    addMultisig: {
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      multisigAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      contentHash: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    mirrorPollResponse: {
      pollId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      choiceId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      address: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    createMirrorERC20Token: {
      name: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      symbol: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      numDecimals: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      totalSupply: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      description: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      tokenAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      network: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      version: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      operatorAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      ensLabel: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      iconMediaAssetId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      nonce: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    setMirrorERC20TokenTransactionHash: {
      tokenAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      transactionHash: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    createEditionsOpenSale: {
      h: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      contractAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      userProfileId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      token: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      startTokenId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      endTokenId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      operator: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      recipient: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      price: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      open: {
        type: "Boolean",
        array: false,
        arrayRequired: false,
        required: false
      },
      network: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      transactionHash: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    createCrowdfundTokenApproval: {
      crowdfundAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      approvalAmount: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    setTransactionHashForCrowdfundTokenApproval: {
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      crowdfundAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      transactionHash: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    createDutchAuction: {
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      name: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      description: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      subheading: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      editionContractAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      dutchAuctionAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      fundsRecipientAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      version: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      network: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      startTokenId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      endTokenId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      pricesInEth: {
        type: "String",
        array: true,
        arrayRequired: false,
        required: false
      },
      interval: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    setDutchAuctionTransactionHash: {
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      dutchAuctionAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      transactionHash: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    inviteProjectContributor: {
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      contributorAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    acceptProjectContributorInvite: {
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    revokeProjectContributor: {
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      contributorAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    updateProject: {
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      settings: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    setProjectHeaderImage: {
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      headerImageId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    updateProjectTheme: {
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      digest: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      key: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      signature: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      timestamp: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      colorMode: {
        type: "ColorModeType",
        array: false,
        arrayRequired: false,
        required: false
      },
      accent: {
        type: "AccentType",
        array: false,
        arrayRequired: false,
        required: false
      }
    },
    updatePluginStatus: {
      projectAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      userAddress: {
        type: "String",
        array: false,
        arrayRequired: false,
        required: false
      },
      pluginId: {
        type: "Int",
        array: false,
        arrayRequired: false,
        required: false
      },
      install: {
        type: "Boolean",
        array: false,
        arrayRequired: false,
        required: false
      }
    }
  },
  EditionForSignatureType: {
    title: {
      type: "String",
      array: false,
      arrayRequired: false,
      required: false
    },
    description: {
      type: "String",
      array: false,
      arrayRequired: false,
      required: false
    },
    quantity: {
      type: "Int",
      array: false,
      arrayRequired: false,
      required: false
    },
    price: {
      type: "Float",
      array: false,
      arrayRequired: false,
      required: false
    },
    contentHash: {
      type: "String",
      array: false,
      arrayRequired: false,
      required: false
    }
  },
  SplitAllocationInputType: {
    splitId: {
      type: "Int",
      array: false,
      arrayRequired: false,
      required: false
    },
    address: {
      type: "String",
      array: false,
      arrayRequired: false,
      required: false
    },
    scaledPercent: {
      type: "Int",
      array: false,
      arrayRequired: false,
      required: false
    }
  },
  EditionInputType: {
    title: {
      type: "String",
      array: false,
      arrayRequired: false,
      required: false
    },
    description: {
      type: "String",
      array: false,
      arrayRequired: false,
      required: false
    },
    quantity: {
      type: "Int",
      array: false,
      arrayRequired: false,
      required: false
    },
    price: {
      type: "Float",
      array: false,
      arrayRequired: false,
      required: false
    },
    contentHash: {
      type: "String",
      array: false,
      arrayRequired: false,
      required: false
    },
    artifactPrimaryId: {
      type: "Int",
      array: false,
      arrayRequired: false,
      required: false
    },
    artifactThumbnailId: {
      type: "Int",
      array: false,
      arrayRequired: false,
      required: false
    },
    singleArtifact: {
      type: "Boolean",
      array: false,
      arrayRequired: false,
      required: false
    },
    attributes: {
      type: "EditionAttributeInputType",
      array: true,
      arrayRequired: false,
      required: false
    }
  },
  EditionAttributeInputType: {
    trait_type: {
      type: "String",
      array: false,
      arrayRequired: false,
      required: false
    },
    display_type: {
      type: "String",
      array: false,
      arrayRequired: false,
      required: false
    },
    value: {
      type: "String",
      array: false,
      arrayRequired: false,
      required: false
    }
  },
  MediaAssetSizesInputType: {
    og: {
      type: "MediaAssetSizeInputType",
      array: false,
      arrayRequired: false,
      required: false
    },
    lg: {
      type: "MediaAssetSizeInputType",
      array: false,
      arrayRequired: false,
      required: false
    },
    md: {
      type: "MediaAssetSizeInputType",
      array: false,
      arrayRequired: false,
      required: false
    },
    sm: {
      type: "MediaAssetSizeInputType",
      array: false,
      arrayRequired: false,
      required: false
    }
  },
  MediaAssetSizeInputType: {
    height: {
      type: "Int",
      array: false,
      arrayRequired: false,
      required: false
    },
    width: {
      type: "Int",
      array: false,
      arrayRequired: false,
      required: false
    },
    src: {
      type: "String",
      array: false,
      arrayRequired: false,
      required: false
    },
    size: {
      type: "String",
      array: false,
      arrayRequired: false,
      required: false
    }
  },
  ProposalEntryInput: {
    body: {
      type: "String",
      array: false,
      arrayRequired: false,
      required: false
    },
    address: {
      type: "String",
      array: false,
      arrayRequired: false,
      required: false
    },
    twitterUsername: {
      type: "String",
      array: false,
      arrayRequired: false,
      required: false
    }
  }
};
var ReturnTypes = {
  publication: {
    id: "Int",
    ensLabel: "String",
    displayName: "String",
    avatarURL: "String",
    entries: "entry",
    crowdfundEntries: "crowdfund",
    posts: "PostType",
    publicationSettings: "publicationSettings",
    contributors: "contributor",
    nft: "nft"
  },
  crowdfund: {
    _id: "String",
    id: "Int",
    crowdfundDraftId: "Int",
    name: "String",
    symbol: "String",
    title: "String",
    contributorAddress: "String",
    description: "String",
    content: "String",
    publication: "publication",
    operator: "UserProfileType",
    address: "String",
    fundingRecipient: "String",
    goal: "String",
    stretchGoal: "String",
    network: "String",
    transactionHash: "String",
    contributionLimit: "String",
    endsAt: "Int",
    version: "String",
    editions: "edition",
    metadata: "CrowdfundMetadataType",
    publishStatus: "String",
    createdAt: "String",
    status: "CrowdfundStatusType",
    exchangeRate: "String",
    token: "mirrorERC20Token",
    publisher: "PublisherType"
  },
  UserProfileType: {
    address: "String",
    displayName: "String",
    avatarURL: "String",
    contributor: "contributor",
    nfts: "NFTType",
    editions: "EditionsType",
    notificationSettings: "NotificationSettingsType",
    theme: "UserProfileThemeType",
    ens: "String",
    headerImage: "MediaAssetType",
    description: "String",
    gaTrackingID: "String",
    mailingListURL: "String",
    domain: "String",
    memberships: "ProjectType",
    members: "ProjectType"
  },
  contributor: {
    address: "String",
    id: "String",
    displayName: "String",
    avatarURL: "String",
    publications: "publication",
    signingKeys: "signingKey"
  },
  signingKey: {
    id: "Int",
    publicKey: "String",
    signature: "signingKeySignature"
  },
  signingKeySignature: {
    id: "Int",
    signingKeyId: "Int",
    signature: "String",
    message: "String"
  },
  NFTType: {
    contract: "NFTContractType",
    name: "String",
    tokenId: "String",
    imageURL: "String",
    imagePreviewUrl: "String",
    imageThumbnailUrl: "String",
    imageOriginalUrl: "String",
    animationUrl: "String",
    animationOriginalUrl: "String"
  },
  NFTContractType: {
    address: "String",
    name: "String",
    symbol: "String"
  },
  EditionsType: {
    purchased: "EditionPurchasedType"
  },
  EditionPurchasedType: {
    blockNumber: "Int",
    transactionHash: "String",
    logIndex: "Int",
    event: "String",
    editionId: "String",
    tokenId: "String",
    numSold: "String",
    serial: "String",
    amountPaid: "String",
    buyer: "String",
    edition: "edition"
  },
  edition: {
    _id: "String",
    id: "Int",
    title: "String",
    quantity: "Int",
    description: "String",
    price: "Float",
    allocation: "Int",
    editionId: "Int",
    entryId: "Int",
    contentHash: "String",
    fundingRecipient: "String",
    transactionHash: "String",
    editionContractAddress: "String",
    version: "String",
    singleArtifact: "Boolean",
    attributes: "EditionAttribute",
    crowdfund: "crowdfund",
    primaryMedia: "MediaAssetType",
    thumbnailMedia: "MediaAssetType",
    mediaURL: "String",
    artifacts: "editionArtifact",
    operator: "UserProfileType",
    creator: "contributor",
    publication: "publication",
    entry: "entry",
    events: "EditionEventsType",
    tokenIds: "String",
    publisher: "PublisherType"
  },
  EditionAttribute: {
    trait_type: "String",
    display_type: "String",
    value: "String"
  },
  MediaAssetType: {
    id: "Int",
    mimetype: "String",
    sizes: "MediaAssetSizesType",
    url: "String"
  },
  MediaAssetSizesType: {
    og: "MediaAssetSizeType",
    lg: "MediaAssetSizeType",
    md: "MediaAssetSizeType",
    sm: "MediaAssetSizeType"
  },
  MediaAssetSizeType: {
    height: "Int",
    width: "Int",
    src: "String"
  },
  editionArtifact: {
    tokenId: "Int",
    editionId: "Int",
    url: "String"
  },
  EditionEventsType: {
    event: "String",
    blockNumber: "Int",
    logIndex: "Int",
    transactionHash: "String",
    network: "String",
    quantity: "String",
    price: "String",
    fundingRecipient: "String",
    editionId: "String",
    tokenId: "String",
    numSold: "String",
    buyer: "String",
    feePercent: "String",
    sender: "String",
    newFee: "String",
    feesAccrued: "String",
    previousOwner: "String",
    newOwner: "String",
    amountWithdrawn: "String",
    feeAmount: "String",
    amountPaid: "String",
    contentHash: "String",
    receiver: "String",
    previousCreator: "String",
    newCreator: "String",
    from: "String",
    to: "String",
    owner: "String",
    approved: "String",
    operator: "String",
    avatarURL: "String",
    twitterUsername: "String",
    collectorAddress: "String",
    serialNumber: "String"
  },
  PublisherType: {
    project: "ProjectType",
    member: "ProjectType"
  },
  ProjectType: {
    _id: "String",
    address: "String",
    displayName: "String",
    avatarURL: "String",
    notificationSettings: "NotificationSettingsType",
    theme: "UserProfileThemeType",
    ens: "String",
    headerImage: "MediaAssetType",
    description: "String",
    gaTrackingID: "String",
    mailingListURL: "String",
    domain: "String",
    memberships: "ProjectType",
    members: "ProjectType",
    pendingMemberships: "ProjectType",
    pendingMembers: "ProjectType",
    posts: "PostType",
    featureFlags: "FeatureFlagStatusType",
    navigation: "NavigationType"
  },
  NotificationSettingsType: {
    writeRace: "Boolean"
  },
  UserProfileThemeType: {
    colorMode: "ColorModeType",
    accent: "AccentType"
  },
  PostType: {
    "...on entry": "entry",
    "...on crowdfund": "crowdfund"
  },
  FeatureFlagStatusType: {
    isTokenTabEnabled: "Boolean",
    isPluginsTabEnabled: "Boolean"
  },
  NavigationType: {
    section: "NavigationSectionType",
    content: "NavigationContentType"
  },
  NavigationSectionType: {
    isFundingEnabled: "Boolean",
    isNFTsEnabled: "Boolean"
  },
  NavigationContentType: {
    isCrowdfundsEnabled: "Boolean",
    isSplitsEnabled: "Boolean",
    isTokensEnabled: "Boolean",
    isEditionsEnabled: "Boolean"
  },
  CrowdfundMetadataType: {
    coverImage: "MediaAssetType",
    podium: "PodiumType"
  },
  PodiumType: {
    first: "PodiumFieldType",
    second: "PodiumFieldType",
    third: "PodiumFieldType",
    duration: "Int"
  },
  PodiumFieldType: {
    title: "String",
    description: "String",
    primaryMedia: "MediaAssetType",
    thumbnailMedia: "MediaAssetType"
  },
  CrowdfundStatusType: {
    status: "String"
  },
  mirrorERC20Token: {
    id: "Int",
    name: "String",
    symbol: "String",
    numDecimals: "String",
    totalSupply: "String",
    totalSupplyFormatted: "String",
    operator: "UserProfileType",
    description: "String",
    publication: "publication",
    tokenAddress: "String",
    iconMedia: "MediaAssetType",
    network: "String",
    transactionHash: "String",
    contributionLimit: "String",
    ownerAddress: "String",
    version: "String",
    createdAt: "String",
    publisher: "PublisherType"
  },
  publicationSettings: {
    publicationLabel: "String",
    settings: "String",
    digest: "String",
    contributorAddress: "String",
    key: "String",
    signature: "String",
    timestamp: "Int"
  },
  nft: {
    id: "Int",
    name: "String",
    tokenURI: "String",
    contributorAddress: "String",
    address: "String",
    contentHash: "String",
    network: "String",
    tokenId: "Int",
    transactionHash: "String",
    entryDigest: "String"
  },
  entry: {
    _id: "String",
    id: "Int",
    entryId: "Int",
    digest: "String",
    originalDigest: "String",
    title: "String",
    hideTitleInEntry: "Boolean",
    body: "String",
    timestamp: "Int",
    publishedAtTimestamp: "Int",
    publishStatus: "String",
    canonicalUrl: "String",
    publicationId: "Int",
    userProfileId: "Int",
    featuredImageId: "Int",
    arweaveTransactionRequest: "ArweaveTransactionRequestType",
    nftTransactionHash: "String",
    nftAddress: "Int",
    nftTokenId: "Int",
    publication: "publication",
    userProfile: "UserProfileType",
    contributor: "contributor",
    author: "UserProfileType",
    nft: "nft",
    authorship: "Authorship",
    contributors: "contributor",
    editions: "edition",
    featuredImage: "MediaAssetType",
    publisher: "PublisherType",
    collaborators: "ProjectType"
  },
  ArweaveTransactionRequestType: {
    id: "Int",
    transactionId: "String",
    entryId: "Int"
  },
  Authorship: {
    publicKey: "String",
    signature: "String"
  },
  query: {
    publication: "publication",
    publicationFeed: "publication",
    publicationContributors: "contributor",
    publications: "publication",
    contributor: "contributor",
    contributorsByAddress: "contributor",
    nextContributorId: "Int",
    entry: "entry",
    entries: "entry",
    resolveENS: "ENS",
    lookupENS: "ENS",
    addressInfo: "addressInfo",
    publicationSettings: "publicationSettings",
    verifiedAccounts: "VerifiedAccount",
    verifiedAccount: "VerifiedAccount",
    isVerified: "Boolean",
    verifiedAccountsAfterTimestamp: "VerifiedAccount",
    registrationEvent: "registrationEvent",
    registrationEvents: "registrationEvent",
    registeredProfiles: "RegisteredProfile",
    verifiedVotes: "VerifiedVoteType",
    votingPower: "VotingPowerType",
    verifiedVotesByRound: "VerifiedVoteType",
    crowdfunds: "CrowdfundListType",
    droppedCrowdfunds: "crowdfund",
    crowdfundAtAddress: "crowdfund",
    crowdfundBlockData: "CrowdfundBlock",
    crowdfundEntries: "crowdfund",
    nfts: "nft",
    nft: "nft",
    reserveAuctions: "reserveAuction",
    reserveAuction: "reserveAuction",
    socialProfiles: "SocialProfileType",
    socialProfile: "SocialProfileType",
    writeRaceProfiles: "WriteRaceProfileType",
    leaderboard: "LeaderboardType",
    twitterProfile: "TwitterProfileType",
    twitterProfilesById: "TwitterProfileType",
    splits: "SplitType",
    split: "SplitType",
    unverifiedTwitterProfiles: "UnverifiedTwitterProfileType",
    editions: "edition",
    edition: "edition",
    userActivityFeed: "ActivityPropertiesType",
    email: "email",
    crowdfundEvents: "crowdfundEvents",
    userProfile: "UserProfileType",
    me: "ProjectType",
    verifyPublicKey: "PublicKeyVerification",
    address: "String",
    mirrorProject: "MirrorProjectType",
    projectThemeOptions: "ProjectThemeOptionsType",
    hasUserSubmittedSurvey: "Boolean",
    getSurvey: "SurveyType",
    crowdfundDraftById: "CrowdfundDraft",
    contracts: "Contract",
    proposals: "Proposal",
    proposal: "Proposal",
    proposalVotingPower: "ProposalUserVotingPower",
    proposalEntryVotes: "ProposalEntryVote",
    writeRaceSearch: "WriteRaceRoundDataType",
    writeRaceVotingPower: "WriteRaceVotingPowerType",
    writeRaceCurrentUser: "WriteRaceCurrentUser",
    writeRaceCurrentRound: "WriteRaceCurrentRound",
    writeRaceLeaderboard: "WriteRaceLeaderboardType",
    writeRaceGenesisWriters: "WriteRaceLeaderboardWinnerType",
    mirrorPoll: "MirrorPollType",
    mirrorPollCanRespond: "Boolean",
    mirrorPollUser: "MirrorPollUser",
    dutchAuction: "DutchAuctionType",
    editionOpenSale: "editionOpenSale",
    mirrorERC20Tokens: "mirrorERC20Token",
    mirrorERC20TokenAtAddress: "mirrorERC20Token",
    crowdfundTokenApprovalMetadata: "crowdfundTokenApprovalMetadata",
    projectFeed: "ProjectType",
    plugins: "PluginType"
  },
  ENS: {
    name: "String",
    address: "String"
  },
  addressInfo: {
    ens: "String",
    writeTokens: "String",
    hasOnboarded: "Boolean"
  },
  VerifiedAccount: {
    twitterProfileId: "Int",
    account: "String",
    username: "String",
    signature: "String",
    name: "String",
    twitterId: "String",
    avatarURL: "String",
    followerCount: "Int",
    promptResponse: "promptResponse"
  },
  promptResponse: {
    id: "Int",
    content: "String",
    createdAt: "String"
  },
  registrationEvent: {
    id: "Int",
    account: "String",
    ensLabel: "String",
    transactionHash: "String"
  },
  RegisteredProfile: {
    id: "Int",
    account: "String",
    username: "String",
    avatarURL: "String"
  },
  VerifiedVoteType: {
    account: "String",
    candidate: "String",
    round: "String",
    signature: "String",
    amount: "Int",
    createdAt: "Int"
  },
  VotingPowerType: {
    account: "String",
    votingPower: "Float",
    round: "String",
    reasons: "String"
  },
  CrowdfundListType: {
    "...on CrowdfundDraft": "CrowdfundDraft",
    "...on crowdfund": "crowdfund"
  },
  CrowdfundDraft: {
    _id: "String",
    id: "Int",
    data: "String",
    name: "String",
    symbol: "String",
    title: "String",
    crowdfundDraftId: "Int",
    publisher: "PublisherType"
  },
  CrowdfundBlock: {
    name: "String",
    symbol: "String",
    contractAddress: "String",
    valueCurrent: "String",
    stretchGoal: "Float",
    fundingCap: "Float",
    tokensIssued: "String",
    isRedeemable: "Boolean",
    isActive: "Boolean",
    operatorEquityPercent: "String",
    contributionLimit: "String",
    fundingRecipientAddress: "String",
    operator: "UserProfileType",
    backers: "CrowdfundBacker",
    events: "CrowdfundEvent",
    podiumDuration: "Int",
    podiumStartTime: "Int",
    minPodiumBid: "String",
    accountBalance: "String",
    totalSupply: "String",
    status: "String"
  },
  CrowdfundBacker: {
    eth: "String",
    tokens: "String",
    address: "String",
    blockNumber: "Int",
    avatarURL: "String",
    twitterUsername: "String",
    percentage: "String"
  },
  CrowdfundEvent: {
    id: "Int",
    event: "String",
    amount: "String",
    amountRaised: "String",
    amountFormatted: "Float",
    amountRaisedFormatted: "String",
    creatorAllocation: "String",
    value: "String",
    address: "String",
    from: "String",
    to: "String",
    blockNumber: "Int",
    logIndex: "Int",
    network: "String",
    transactionHash: "String",
    editionId: "Int",
    tokenId: "Int",
    crowdfundId: "Int",
    timestamp: "String"
  },
  reserveAuction: {
    _id: "String",
    id: "Int",
    tokenId: "Int",
    duration: "Int",
    address: "String",
    nftAddress: "String",
    auctionId: "String",
    creatorShareRecipientAddress: "String",
    creatorAddress: "String",
    fundsRecipientAddress: "String",
    deployerAddress: "String",
    curatorAddress: "String",
    curatorFee: "String",
    version: "String",
    reservePrice: "String",
    network: "String",
    transactionHash: "String",
    createdAt: "String",
    events: "ReserveAuctionEvent",
    operator: "UserProfileType",
    deployer: "contributor",
    publication: "publication",
    publisher: "PublisherType"
  },
  ReserveAuctionEvent: {
    event: "String",
    blockNumber: "Int",
    logIndex: "Int",
    transactionHash: "String",
    network: "String",
    nftContractAddress: "String",
    tokenId: "String",
    curator: "String",
    amount: "String",
    winner: "String",
    nftCreator: "String",
    fundsRecipient: "String",
    value: "String",
    sender: "String",
    duration: "String",
    reservePrice: "String",
    curatorFeePercent: "String",
    creator: "String",
    originalCreator: "String",
    zoraAddress: "String",
    creatorShareRecipient: "String",
    firstBid: "String",
    extended: "String",
    timestamp: "String",
    auctionId: "String"
  },
  SocialProfileType: {
    address: "String",
    twitter: "TwitterProfileType",
    mirror: "MirrorProfileType"
  },
  TwitterProfileType: {
    id: "Int",
    username: "String",
    avatarURL: "String",
    twitterId: "String",
    followerCount: "Int",
    name: "String"
  },
  MirrorProfileType: {
    contributor: "contributor"
  },
  WriteRaceProfileType: {
    address: "String",
    twitter: "TwitterProfileType",
    mirror: "MirrorProfileType",
    promptResponse: "promptResponse"
  },
  LeaderboardType: {
    title: "String",
    numVotes: "Int",
    candidates: "Int",
    profiles: "LeaderboardProfileType"
  },
  LeaderboardProfileType: {
    numVotes: "Int",
    votingPower: "Int",
    account: "String",
    username: "String",
    avatarURL: "String",
    followerCount: "Int",
    backers: "LeaderboardBackerType",
    ensDomain: "String",
    notHighlighted: "Boolean"
  },
  LeaderboardBackerType: {
    amount: "Int",
    account: "String",
    username: "String",
    avatarURL: "String",
    followerCount: "Int"
  },
  SplitType: {
    _id: "String",
    id: "Int",
    name: "String",
    address: "String",
    transactionHash: "String",
    network: "String",
    splitAllocations: "SplitAllocationType",
    events: "SplitEventType",
    operator: "UserProfileType",
    publication: "publication",
    publisher: "PublisherType"
  },
  SplitAllocationType: {
    id: "Int",
    address: "String",
    scaledPercent: "Int",
    splitAmount: "Float",
    account: "String",
    userProfile: "UserProfileType"
  },
  SplitEventType: {
    event: "String",
    account: "String",
    amount: "String",
    amountFormatted: "String",
    asset: "String",
    blockNumber: "Int",
    category: "String",
    currentWindow: "String",
    from: "String",
    fundsAvailable: "String",
    fundsAvailableFormatted: "String",
    logIndex: "Int",
    network: "String",
    success: "String",
    to: "String",
    transactionHash: "String"
  },
  UnverifiedTwitterProfileType: {
    id: "Int",
    address: "String",
    twitterProfile: "TwitterProfileType"
  },
  ActivityPropertiesType: {
    key: "String",
    detailValue: "String"
  },
  email: {
    verificationStatus: "VerificationStatusEnum"
  },
  crowdfundEvents: {
    event: "String",
    amount: "String",
    amountRaised: "String",
    amountFormatted: "Float",
    amountRaisedFormatted: "Float",
    creatorAllocation: "String",
    value: "String",
    address: "String",
    from: "String",
    to: "String",
    blockNumber: "Int",
    logIndex: "Int",
    network: "String",
    transactionHash: "String",
    tokenId: "String",
    editionId: "String"
  },
  PublicKeyVerification: {
    address: "String"
  },
  MirrorProjectType: {
    isRegistered: "Boolean",
    projectDetails: "ProjectType"
  },
  ProjectThemeOptionsType: {
    colorModes: "String",
    accents: "String"
  },
  SurveyType: {
    prompt: "String",
    backers: "String",
    title: "String",
    description: "String"
  },
  Contract: {
    name: "String",
    abi: "String",
    address: "String",
    version: "String"
  },
  Proposal: {
    _id: "String",
    cid: "String",
    erc20Address: "String",
    erc721Address: "String",
    startDate: "String",
    endDate: "String",
    tokenName: "String",
    tokenSymbol: "String",
    title: "String",
    description: "String",
    prompt: "String",
    tokenThreshold: "Float",
    tokenIds: "String",
    highlightedWinners: "Int",
    coverImage: "MediaAssetType",
    status: "String",
    snapshot: "ProposalSnapshot",
    results: "ProposalResult",
    resultsCid: "String",
    entries: "ProposalEntry",
    operator: "UserProfileType",
    publication: "publication",
    erc721Multiplier: "Int",
    publisher: "PublisherType"
  },
  ProposalSnapshot: {
    cid: "String",
    blockNumber: "String"
  },
  ProposalResult: {
    votes: "Float",
    proposalEntryCid: "String",
    proposalCid: "String",
    body: "String",
    entryAuthorAddress: "String",
    isHighlighted: "Boolean",
    position: "Int"
  },
  ProposalEntry: {
    address: "String",
    body: "String",
    cid: "String",
    proposalCid: "String",
    votes: "Float",
    twitter: "TwitterProfileType"
  },
  ProposalUserVotingPower: {
    totalVotes: "Float",
    availableVotes: "Float",
    multisigs: "ProposalVotingPowerMultisig"
  },
  ProposalVotingPowerMultisig: {
    totalVotes: "Float",
    availableVotes: "Float",
    address: "String"
  },
  ProposalEntryVote: {
    votes: "Float",
    address: "String",
    twitter: "TwitterProfileType"
  },
  WriteRaceRoundDataType: {
    address: "String",
    votes: "Int",
    voters: "WriteRaceVoterDataType",
    twitter: "TwitterProfileType",
    response: "String",
    score: "Float"
  },
  WriteRaceVoterDataType: {
    address: "String",
    twitter: "TwitterProfileType",
    votes: "Int"
  },
  WriteRaceVotingPowerType: {
    totalVotes: "Int",
    availableVotes: "Int"
  },
  WriteRaceCurrentUser: {
    address: "String",
    votes: "Int",
    voters: "WriteRaceVoterDataType",
    twitter: "TwitterProfileType",
    response: "String",
    isRegistered: "Boolean",
    isWinner: "Boolean",
    rank: "Int"
  },
  WriteRaceCurrentRound: {
    round: "Int",
    status: "String",
    startsAt: "String",
    endsAt: "String",
    roundDetails: "WriteRaceRoundType",
    isQuadratic: "Boolean",
    isPaused: "Boolean"
  },
  WriteRaceRoundType: {
    roundData: "WriteRaceRoundDataType",
    votesCast: "Int",
    candidates: "Int",
    currentPrompt: "String",
    roundNumber: "Int",
    voters: "Int"
  },
  WriteRaceLeaderboardType: {
    isQuadratic: "Boolean",
    votes: "Int",
    candidates: "Int",
    winners: "WriteRaceLeaderboardWinnerType",
    voters: "Int"
  },
  WriteRaceLeaderboardWinnerType: {
    voters: "WriteRaceVoterDataType",
    address: "String",
    votes: "Int",
    score: "Float",
    votingPower: "Int",
    twitter: "TwitterProfileType",
    ensLabel: "String"
  },
  MirrorPollType: {
    _id: "String",
    id: "Int",
    title: "String",
    description: "String",
    prompt: "String",
    status: "MirrorPollStatusEnum",
    endsAt: "String",
    startsAt: "String",
    coverImage: "MediaAssetType",
    choices: "MirrorPollChoice"
  },
  MirrorPollChoice: {
    id: "Int",
    title: "String",
    description: "String",
    responses: "MirrorPollResponse"
  },
  MirrorPollResponse: {
    address: "String",
    twitter: "TwitterProfileType"
  },
  MirrorPollUser: {
    hasPermission: "Boolean",
    existingVote: "Int"
  },
  DutchAuctionType: {
    _id: "String",
    events: "DutchAuctionEventType",
    status: "DutchAuctionStatusType",
    operator: "UserProfileType",
    publication: "publication",
    address: "String",
    transactionHash: "String",
    version: "String",
    fundsRecipientAddress: "String",
    name: "String",
    subheading: "String",
    description: "String",
    tokenIds: "Int",
    prices: "Float",
    totalSupply: "Int",
    collected: "Int",
    currentPrice: "Float",
    timeRemaining: "String",
    nextBlock: "String",
    edition: "edition",
    isPaused: "Boolean",
    collectors: "CollectorType",
    totalRaised: "Float",
    hasStarted: "Boolean",
    network: "String",
    publisher: "PublisherType"
  },
  DutchAuctionEventType: {
    blockNumber: "Int",
    logIndex: "Int",
    network: "String",
    transactionHash: "String",
    event: "String",
    tokenId: "String",
    recipient: "String",
    amount: "String",
    fee: "String",
    price: "String",
    account: "String",
    priceFormatted: "String",
    amountFormatted: "String",
    feeFormatted: "String"
  },
  CollectorType: {
    address: "String",
    user: "UserProfileType",
    price: "Float"
  },
  editionOpenSale: {
    id: "Int",
    token: "String",
    operator: "String",
    recipient: "String",
    symbol: "String",
    startTokenId: "String",
    endTokenId: "String",
    price: "String",
    userProfile: "UserProfileType",
    publication: "publication",
    contract: "Contract",
    h: "String",
    network: "String",
    transactionHash: "String",
    contributionLimit: "String",
    version: "String",
    createdAt: "String",
    open: "Boolean",
    status: "String",
    publisher: "PublisherType",
    purchases: "editionOpenSalePurchase"
  },
  editionOpenSalePurchase: {
    tokenId: "Int",
    buyer: "String",
    recipient: "String",
    twitterUsername: "String",
    avatarURL: "String",
    transactionHash: "String"
  },
  crowdfundTokenApprovalMetadata: {
    id: "Int",
    status: "String",
    tokenAddress: "String",
    crowdfundAddress: "String",
    numberOfTokensToApprove: "String",
    tokenOwnerAddress: "String",
    transactionHash: "String"
  },
  PluginType: {
    _id: "Int",
    key: "String",
    name: "String",
    description: "String",
    imageURL: "String",
    installed: "Boolean"
  },
  mutations: {
    registerContributor: "contributor",
    registerContributorForPublication: "contributor",
    updateContributorSettings: "contributor",
    removeContributor: "success",
    changeEntryStatus: "Boolean",
    createEntry: "entry",
    addSigningKey: "signingKey",
    addNonMemberSigningKey: "signingKey",
    _testSigning: "Boolean",
    updateEntry: "entry",
    updateSettings: "Boolean",
    updatePublicationSettings: "publicationSettings",
    verifyTweet: "Boolean",
    verifyTweetV2: "Boolean",
    removeTwitter: "Boolean",
    saveRegistrationEvent: "registrationEvent",
    verifyVote: "Boolean",
    createCrowdfund: "crowdfund",
    setCrowdfundTransactionHash: "Boolean",
    updateCrowdfund: "crowdfund",
    updateCrowdfundPublishStatus: "crowdfund",
    createNFT: "nft",
    createReserveAuction: "reserveAuction",
    createPromptResponse: "promptResponse",
    createSplit: "SplitType",
    createSplitAllocations: "Boolean",
    createEdition: "edition",
    createCrowdfundEditions: "edition",
    createEntryEditions: "edition",
    setEditionTransactionHash: "Boolean",
    setEditionTransactionHashWithUserProfile: "Boolean",
    createMediaAsset: "MediaAssetType",
    addEmail: "email",
    verifyEmail: "email",
    setWriteRaceNotification: "Boolean",
    createUserProfile: "UserProfileType",
    updateUserProfile: "UserProfileType",
    updateUserProfileTheme: "UserProfileThemeType",
    relinkEns: "ENS",
    setUserProfileHeaderImage: "MediaAssetType",
    addSurveyResponse: "Boolean",
    createCrowdfundDraft: "CrowdfundDraft",
    editCrowdfundDraft: "CrowdfundDraft",
    deleteCrowdfundDraft: "Boolean",
    createOrUpdateCrowdfundDraft: "CrowdfundDraft",
    setCrowdfundIdForCrowdfundDraft: "Boolean",
    createProposal: "Proposal",
    cancelProposal: "Boolean",
    voteOnProposal: "ProposalUserVotingPower",
    addMultisig: "Boolean",
    mirrorPollResponse: "Boolean",
    createMirrorERC20Token: "mirrorERC20Token",
    setMirrorERC20TokenTransactionHash: "Boolean",
    createEditionsOpenSale: "editionOpenSale",
    createCrowdfundTokenApproval: "Boolean",
    setTransactionHashForCrowdfundTokenApproval: "Boolean",
    createDutchAuction: "DutchAuctionType",
    setDutchAuctionTransactionHash: "Boolean",
    inviteProjectContributor: "ProjectType",
    acceptProjectContributorInvite: "ProjectType",
    revokeProjectContributor: "ProjectType",
    updateProject: "ProjectType",
    setProjectHeaderImage: "MediaAssetType",
    updateProjectTheme: "ProjectThemeType",
    updatePluginStatus: "Boolean"
  },
  success: {
    success: "Boolean"
  },
  ProjectThemeType: {
    colorMode: "ColorModeType",
    accent: "AccentType"
  }
};

/***/ }),

/***/ "./src/zeus/index.ts":
/*!***************************!*\
  !*** ./src/zeus/index.ts ***!
  \***************************/
/*! exports provided: ColorModeType, AccentType, VerificationStatusEnum, MirrorPollStatusEnum, DutchAuctionStatusType, GraphQLError, ZeusSelect, ScalarResolver, TypesPropsResolver, queryConstruct, fullChainConstruct, fullSubscriptionConstruct, $, resolverFor, apiFetch, apiSubscription, Thunder, Chain, SubscriptionThunder, Subscription, Zeus, Selector */
/*! exports used: Thunder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export ColorModeType */
/* unused harmony export AccentType */
/* unused harmony export VerificationStatusEnum */
/* unused harmony export MirrorPollStatusEnum */
/* unused harmony export DutchAuctionStatusType */
/* unused harmony export GraphQLError */
/* unused harmony export ZeusSelect */
/* unused harmony export ScalarResolver */
/* unused harmony export TypesPropsResolver */
/* unused harmony export queryConstruct */
/* unused harmony export fullChainConstruct */
/* unused harmony export fullSubscriptionConstruct */
/* unused harmony export $ */
/* unused harmony export resolverFor */
/* unused harmony export apiFetch */
/* unused harmony export apiSubscription */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Thunder; });
/* unused harmony export Chain */
/* unused harmony export SubscriptionThunder */
/* unused harmony export Subscription */
/* unused harmony export Zeus */
/* unused harmony export Selector */
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_string_starts_with_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.string.starts-with.js */ "./node_modules/core-js/modules/es.string.starts-with.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_string_starts_with_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_string_starts_with_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_string_split_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.string.split.js */ "./node_modules/core-js/modules/es.string.split.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_string_split_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_string_split_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.object.keys.js */ "./node_modules/core-js/modules/es.object.keys.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.array.filter.js */ "./node_modules/core-js/modules/es.array.filter.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_splice_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.array.splice.js */ "./node_modules/core-js/modules/es.array.splice.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_splice_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_splice_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_is_array_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.array.is-array.js */ "./node_modules/core-js/modules/es.array.is-array.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_is_array_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_is_array_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./node_modules/core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.array.includes.js */ "./node_modules/core-js/modules/es.array.includes.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.string.includes.js */ "./node_modules/core-js/modules/es.string.includes.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_assign_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.object.assign.js */ "./node_modules/core-js/modules/es.object.assign.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_assign_js__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_assign_js__WEBPACK_IMPORTED_MODULE_20__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.object.set-prototype-of.js */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_21__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_22__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_23__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_date_to_string_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_date_to_string_js__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_date_to_string_js__WEBPACK_IMPORTED_MODULE_24__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.reflect.construct.js */ "./node_modules/core-js/modules/es.reflect.construct.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_25__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_26___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_26__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_map_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.map.js */ "./node_modules/core-js/modules/es.map.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_map_js__WEBPACK_IMPORTED_MODULE_27___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_map_js__WEBPACK_IMPORTED_MODULE_27__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_28___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_28__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_29___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_29__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./node_modules/core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_30___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_30__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_31___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_31__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_32___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_32__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_33___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_33__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_34___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_34__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_35___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_35__);
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./node_modules/core-js/modules/es.array.from.js */ "./node_modules/core-js/modules/es.array.from.js");
/* harmony import */ var _Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_36___default = /*#__PURE__*/__webpack_require__.n(_Users_kirill_Desktop_mirrorblocks_node_modules_core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_36__);
/* harmony import */ var _const__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./const */ "./src/zeus/const.ts");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function (_e2) { function e(_x) { return _e2.apply(this, arguments); } e.toString = function () { return _e2.toString(); }; return e; }(function (e) { throw e; }), f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function (_e3) { function e(_x2) { return _e3.apply(this, arguments); } e.toString = function () { return _e3.toString(); }; return e; }(function (e) { didErr = true; err = e; }), f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }







































function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/* eslint-disable */

var ColorModeType;

(function (ColorModeType) {
  ColorModeType["DARK"] = "DARK";
  ColorModeType["LIGHT"] = "LIGHT";
})(ColorModeType || (ColorModeType = {}));

var AccentType;

(function (AccentType) {
  AccentType["BLUE"] = "BLUE";
  AccentType["GREEN"] = "GREEN";
  AccentType["INDIGO"] = "INDIGO";
  AccentType["ORANGE"] = "ORANGE";
  AccentType["PINK"] = "PINK";
  AccentType["PURPLE"] = "PURPLE";
  AccentType["RED"] = "RED";
  AccentType["TEAL"] = "TEAL";
  AccentType["YELLOW"] = "YELLOW";
  AccentType["FOREGROUND"] = "FOREGROUND";
})(AccentType || (AccentType = {}));

var VerificationStatusEnum;

(function (VerificationStatusEnum) {
  VerificationStatusEnum["EMAIL_NOT_VERIFIED"] = "EMAIL_NOT_VERIFIED";
  VerificationStatusEnum["EMAIL_VERIFIED"] = "EMAIL_VERIFIED";
  VerificationStatusEnum["EMAIL_NOT_SUBMITTED"] = "EMAIL_NOT_SUBMITTED";
})(VerificationStatusEnum || (VerificationStatusEnum = {}));

var MirrorPollStatusEnum;

(function (MirrorPollStatusEnum) {
  MirrorPollStatusEnum["DELETED"] = "DELETED";
  MirrorPollStatusEnum["ENDED"] = "ENDED";
  MirrorPollStatusEnum["LIVE"] = "LIVE";
  MirrorPollStatusEnum["CREATED"] = "CREATED";
})(MirrorPollStatusEnum || (MirrorPollStatusEnum = {}));

var DutchAuctionStatusType;

(function (DutchAuctionStatusType) {
  DutchAuctionStatusType["CREATED"] = "CREATED";
  DutchAuctionStatusType["PENDING"] = "PENDING";
  DutchAuctionStatusType["CONFIRMED"] = "CONFIRMED";
  DutchAuctionStatusType["DROPPED"] = "DROPPED";
  DutchAuctionStatusType["FAILED"] = "FAILED";
})(DutchAuctionStatusType || (DutchAuctionStatusType = {}));

var GraphQLError = /*#__PURE__*/function (_Error) {
  _inherits(GraphQLError, _Error);

  var _super = _createSuper(GraphQLError);

  function GraphQLError(response) {
    var _this;

    _classCallCheck(this, GraphQLError);

    _this = _super.call(this, "");
    console.error(response);
    return _this;
  }

  _createClass(GraphQLError, [{
    key: "toString",
    value: function toString() {
      return "GraphQL Response Error";
    }
  }]);

  return GraphQLError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
var ZeusSelect = function ZeusSelect() {
  return function (t) {
    return t;
  };
};
var ScalarResolver = function ScalarResolver(scalar, value) {
  switch (scalar) {
    case 'String':
      return "" + JSON.stringify(value);

    case 'Int':
      return "" + value;

    case 'Float':
      return "" + value;

    case 'Boolean':
      return "" + value;

    case 'ID':
      return "\"" + value + "\"";

    case 'enum':
      return "" + value;

    case 'scalar':
      return "" + value;

    default:
      return false;
  }
};
var TypesPropsResolver = function TypesPropsResolver(_ref) {
  var value = _ref.value,
      type = _ref.type,
      name = _ref.name,
      key = _ref.key,
      blockArrays = _ref.blockArrays;

  if (value === null) {
    return "null";
  }

  var resolvedValue = _const__WEBPACK_IMPORTED_MODULE_37__[/* AllTypesProps */ "a"][type][name];

  if (key) {
    resolvedValue = resolvedValue[key];
  }

  if (!resolvedValue) {
    throw new Error("Cannot resolve " + type + " " + name + (key ? " " + key : ''));
  }

  var typeResolved = resolvedValue.type;
  var isArray = resolvedValue.array;
  var isArrayRequired = resolvedValue.arrayRequired;

  if (typeof value === 'string' && value.startsWith("ZEUS_VAR$")) {
    var isRequired = resolvedValue.required ? '!' : '';

    var _t = "" + typeResolved;

    if (isArray) {
      if (isRequired) {
        _t = _t + "!";
      }

      _t = "[" + _t + "]";

      if (isArrayRequired) {
        _t = _t + "!";
      }
    } else {
      if (isRequired) {
        _t = _t + "!";
      }
    }

    return "$" + value.split("ZEUS_VAR$")[1] + "__ZEUS_VAR__" + _t;
  }

  if (isArray && !blockArrays) {
    return "[" + value.map(function (v) {
      return TypesPropsResolver({
        value: v,
        type: type,
        name: name,
        key: key,
        blockArrays: true
      });
    }).join(',') + "]";
  }

  var reslovedScalar = ScalarResolver(typeResolved, value);

  if (!reslovedScalar) {
    var resolvedType = _const__WEBPACK_IMPORTED_MODULE_37__[/* AllTypesProps */ "a"][typeResolved];

    if (typeof resolvedType === 'object') {
      var argsKeys = Object.keys(resolvedType);
      return "{" + argsKeys.filter(function (ak) {
        return value[ak] !== undefined;
      }).map(function (ak) {
        return ak + ":" + TypesPropsResolver({
          value: value[ak],
          type: typeResolved,
          name: ak
        });
      }) + "}";
    }

    return ScalarResolver(_const__WEBPACK_IMPORTED_MODULE_37__[/* AllTypesProps */ "a"][typeResolved], value);
  }

  return reslovedScalar;
};

var isArrayFunction = function isArrayFunction(parent, a) {
  var _a = _slicedToArray(a, 2),
      values = _a[0],
      r = _a[1];

  var _parent = _toArray(parent),
      mainKey = _parent[0],
      key = _parent[1],
      keys = _parent.slice(2);

  var keyValues = Object.keys(values).filter(function (k) {
    return typeof values[k] !== 'undefined';
  });

  if (!keys.length) {
    return keyValues.length > 0 ? "(" + keyValues.map(function (v) {
      return v + ":" + TypesPropsResolver({
        value: values[v],
        type: mainKey,
        name: key,
        key: v
      });
    }).join(',') + ")" + (r ? traverseToSeekArrays(parent, r) : '') : traverseToSeekArrays(parent, r);
  }

  var _keys$splice = keys.splice(keys.length - 1, 1),
      _keys$splice2 = _slicedToArray(_keys$splice, 1),
      typeResolverKey = _keys$splice2[0];

  var valueToResolve = _const__WEBPACK_IMPORTED_MODULE_37__[/* ReturnTypes */ "b"][mainKey][key];

  var _iterator = _createForOfIteratorHelper(keys),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var k = _step.value;
      valueToResolve = _const__WEBPACK_IMPORTED_MODULE_37__[/* ReturnTypes */ "b"][valueToResolve][k];
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var argumentString = keyValues.length > 0 ? "(" + keyValues.map(function (v) {
    return v + ":" + TypesPropsResolver({
      value: values[v],
      type: valueToResolve,
      name: typeResolverKey,
      key: v
    });
  }).join(',') + ")" + (r ? traverseToSeekArrays(parent, r) : '') : traverseToSeekArrays(parent, r);
  return argumentString;
};

var resolveKV = function resolveKV(k, v) {
  return typeof v === 'boolean' ? k : typeof v === 'object' ? k + "{" + objectToTree(v) + "}" : "" + k + v;
};

var objectToTree = function objectToTree(o) {
  return "{" + Object.keys(o).map(function (k) {
    return "" + resolveKV(k, o[k]);
  }).join(' ') + "}";
};

var traverseToSeekArrays = function traverseToSeekArrays(parent, a) {
  if (!a) return '';

  if (Object.keys(a).length === 0) {
    return '';
  }

  var b = {};

  if (Array.isArray(a)) {
    return isArrayFunction(_toConsumableArray(parent), a);
  } else {
    if (typeof a === 'object') {
      Object.keys(a).filter(function (k) {
        return typeof a[k] !== 'undefined';
      }).forEach(function (k) {
        if (k === '__alias') {
          Object.keys(a[k]).forEach(function (aliasKey) {
            var aliasOperations = a[k][aliasKey];
            var aliasOperationName = Object.keys(aliasOperations)[0];
            var aliasOperation = aliasOperations[aliasOperationName];
            b[aliasOperationName + "__alias__" + aliasKey + ": " + aliasOperationName] = traverseToSeekArrays([].concat(_toConsumableArray(parent), [aliasOperationName]), aliasOperation);
          });
        } else {
          b[k] = traverseToSeekArrays([].concat(_toConsumableArray(parent), [k]), a[k]);
        }
      });
    } else {
      return '';
    }
  }

  return objectToTree(b);
};

var buildQuery = function buildQuery(type, a) {
  return traverseToSeekArrays([type], a);
};

var inspectVariables = function inspectVariables(query) {
  var regex = /\$\b\w*__ZEUS_VAR__\[?[^!^\]^\s^,^\)^\}]*[!]?[\]]?[!]?/g;
  var result;
  var AllVariables = [];

  while (result = regex.exec(query)) {
    if (AllVariables.includes(result[0])) {
      continue;
    }

    AllVariables.push(result[0]);
  }

  if (!AllVariables.length) {
    return query;
  }

  var filteredQuery = query;
  AllVariables.forEach(function (variable) {
    while (filteredQuery.includes(variable)) {
      filteredQuery = filteredQuery.replace(variable, variable.split('__ZEUS_VAR__')[0]);
    }
  });
  return "(" + AllVariables.map(function (a) {
    return a.split('__ZEUS_VAR__');
  }).map(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
        variableName = _ref3[0],
        variableType = _ref3[1];

    return variableName + ":" + variableType;
  }).join(', ') + ")" + filteredQuery;
};

var queryConstruct = function queryConstruct(t, tName, operationName) {
  return function (o) {
    return "" + t.toLowerCase() + (operationName ? ' ' + operationName : '') + inspectVariables(buildQuery(tName, o));
  };
};
var fullChainConstruct = function fullChainConstruct(fn) {
  return function (t, tName) {
    return function (o, options) {
      return fn(queryConstruct(t, tName, options === null || options === void 0 ? void 0 : options.operationName)(o), options === null || options === void 0 ? void 0 : options.variables).then(function (r) {
        seekForAliases(r);
        return r;
      });
    };
  };
};
var fullSubscriptionConstruct = function fullSubscriptionConstruct(fn) {
  return function (t, tName) {
    return function (o, options) {
      return fn(queryConstruct(t, tName, options === null || options === void 0 ? void 0 : options.operationName)(o));
    };
  };
};

var seekForAliases = function seekForAliases(response) {
  var traverseAlias = function traverseAlias(value) {
    if (Array.isArray(value)) {
      value.forEach(seekForAliases);
    } else {
      if (typeof value === 'object') {
        seekForAliases(value);
      }
    }
  };

  if (typeof response === 'object' && response) {
    var keys = Object.keys(response);

    if (keys.length < 1) {
      return;
    }

    keys.forEach(function (k) {
      var value = response[k];

      if (k.indexOf('__alias__') !== -1) {
        var _response$alias;

        var _k$split = k.split('__alias__'),
            _k$split2 = _slicedToArray(_k$split, 2),
            operation = _k$split2[0],
            alias = _k$split2[1];

        response[alias] = (_response$alias = {}, _response$alias[operation] = value, _response$alias);
        delete response[k];
      }

      traverseAlias(value);
    });
  }
};

var $ = function $(t) {
  return "ZEUS_VAR$" + t.join('');
};
var resolverFor = function resolverFor(type, field, fn) {
  return fn;
};

var handleFetchResponse = function handleFetchResponse(response) {
  if (!response.ok) {
    return new Promise(function (_, reject) {
      response.text().then(function (text) {
        try {
          reject(JSON.parse(text));
        } catch (err) {
          reject(text);
        }
      })["catch"](reject);
    });
  }

  return response.json();
};

var apiFetch = function apiFetch(options) {
  return function (query) {
    var variables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var fetchFunction = fetch;
    var queryString = query;
    var fetchOptions = options[1] || {};

    if (fetchOptions.method && fetchOptions.method === 'GET') {
      queryString = encodeURIComponent(query);
      return fetchFunction(options[0] + "?query=" + queryString, fetchOptions).then(handleFetchResponse).then(function (response) {
        if (response.errors) {
          throw new GraphQLError(response);
        }

        return response.data;
      });
    }

    return fetchFunction("" + options[0], Object.assign({
      body: JSON.stringify({
        query: queryString,
        variables: variables
      }),
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    }, fetchOptions)).then(handleFetchResponse).then(function (response) {
      if (response.errors) {
        throw new GraphQLError(response);
      }

      return response.data;
    });
  };
};
var apiSubscription = function apiSubscription(options) {
  return function (query) {
    try {
      var _options$, _options$$websocket, _options$2;

      var queryString = options[0] + '?query=' + encodeURIComponent(query);
      var wsString = queryString.replace('http', 'ws');
      var host = options.length > 1 && ((_options$ = options[1]) === null || _options$ === void 0 ? void 0 : (_options$$websocket = _options$.websocket) === null || _options$$websocket === void 0 ? void 0 : _options$$websocket[0]) || wsString;
      var webSocketOptions = ((_options$2 = options[1]) === null || _options$2 === void 0 ? void 0 : _options$2.websocket) || [host];

      var ws = _construct(WebSocket, _toConsumableArray(webSocketOptions));

      return {
        ws: ws,
        on: function on(e) {
          ws.onmessage = function (event) {
            if (event.data) {
              var parsed = JSON.parse(event.data);
              var data = parsed.data;

              if (data) {
                seekForAliases(data);
              }

              return e(data);
            }
          };
        },
        off: function off(e) {
          ws.onclose = e;
        },
        error: function error(e) {
          ws.onerror = e;
        },
        open: function open(e) {
          ws.onopen = e;
        }
      };
    } catch (_unused) {
      throw new Error('No websockets implemented');
    }
  };
};
var allOperations = {
  "query": "query",
  "mutation": "mutations"
};
var Thunder = function Thunder(fn) {
  return function (operation) {
    return function (o, ops) {
      return fullChainConstruct(fn)(operation, allOperations[operation])(o, ops);
    };
  };
};
var Chain = function Chain() {
  for (var _len = arguments.length, options = new Array(_len), _key = 0; _key < _len; _key++) {
    options[_key] = arguments[_key];
  }

  return Thunder(apiFetch(options));
};
var SubscriptionThunder = function SubscriptionThunder(fn) {
  return function (operation) {
    return function (o, ops) {
      return fullSubscriptionConstruct(fn)(operation, allOperations[operation])(o, ops);
    };
  };
};
var Subscription = function Subscription() {
  for (var _len2 = arguments.length, options = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    options[_key2] = arguments[_key2];
  }

  return SubscriptionThunder(apiSubscription(options));
};
var Zeus = function Zeus(operation, o, operationName) {
  return queryConstruct(operation, allOperations[operation], operationName)(o);
};
var Selector = function Selector(key) {
  return ZeusSelect();
};

/***/ }),

/***/ "./storybook-init-framework-entry.js":
/*!*******************************************!*\
  !*** ./storybook-init-framework-entry.js ***!
  \*******************************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _storybook_react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @storybook/react */ "./node_modules/@storybook/react/dist/esm/client/index.js");


/***/ }),

/***/ 0:
/*!*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** multi ./node_modules/@storybook/core-client/dist/esm/globals/polyfills.js ./node_modules/@storybook/core-client/dist/esm/globals/globals.js (webpack)-hot-middleware/client.js?reload=true&quiet=false&noInfo=undefined ./storybook-init-framework-entry.js ./node_modules/@storybook/addon-docs/dist/esm/frameworks/common/config.js-generated-config-entry.js ./node_modules/@storybook/addon-docs/dist/esm/frameworks/react/config.js-generated-config-entry.js ./node_modules/@storybook/react/dist/esm/client/preview/config-generated-config-entry.js ./node_modules/@storybook/addon-links/dist/esm/preset/addDecorator.js-generated-config-entry.js ./node_modules/@storybook/addon-actions/dist/esm/preset/addDecorator.js-generated-config-entry.js ./node_modules/@storybook/addon-actions/dist/esm/preset/addArgs.js-generated-config-entry.js ./node_modules/@storybook/addon-backgrounds/dist/esm/preset/addDecorator.js-generated-config-entry.js ./node_modules/@storybook/addon-backgrounds/dist/esm/preset/addParameter.js-generated-config-entry.js ./node_modules/@storybook/addon-measure/dist/esm/preset/addDecorator.js-generated-config-entry.js ./node_modules/@storybook/addon-outline/dist/esm/preset/addDecorator.js-generated-config-entry.js ./.storybook/preview.js-generated-config-entry.js ./generated-stories-entry.js ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! /Users/kirill/Desktop/mirrorblocks/node_modules/@storybook/core-client/dist/esm/globals/polyfills.js */"./node_modules/@storybook/core-client/dist/esm/globals/polyfills.js");
__webpack_require__(/*! /Users/kirill/Desktop/mirrorblocks/node_modules/@storybook/core-client/dist/esm/globals/globals.js */"./node_modules/@storybook/core-client/dist/esm/globals/globals.js");
__webpack_require__(/*! /Users/kirill/Desktop/mirrorblocks/node_modules/webpack-hot-middleware/client.js?reload=true&quiet=false&noInfo=undefined */"./node_modules/webpack-hot-middleware/client.js?reload=true&quiet=false&noInfo=undefined");
__webpack_require__(/*! /Users/kirill/Desktop/mirrorblocks/storybook-init-framework-entry.js */"./storybook-init-framework-entry.js");
__webpack_require__(/*! /Users/kirill/Desktop/mirrorblocks/node_modules/@storybook/addon-docs/dist/esm/frameworks/common/config.js-generated-config-entry.js */"./node_modules/@storybook/addon-docs/dist/esm/frameworks/common/config.js-generated-config-entry.js");
__webpack_require__(/*! /Users/kirill/Desktop/mirrorblocks/node_modules/@storybook/addon-docs/dist/esm/frameworks/react/config.js-generated-config-entry.js */"./node_modules/@storybook/addon-docs/dist/esm/frameworks/react/config.js-generated-config-entry.js");
__webpack_require__(/*! /Users/kirill/Desktop/mirrorblocks/node_modules/@storybook/react/dist/esm/client/preview/config-generated-config-entry.js */"./node_modules/@storybook/react/dist/esm/client/preview/config-generated-config-entry.js");
__webpack_require__(/*! /Users/kirill/Desktop/mirrorblocks/node_modules/@storybook/addon-links/dist/esm/preset/addDecorator.js-generated-config-entry.js */"./node_modules/@storybook/addon-links/dist/esm/preset/addDecorator.js-generated-config-entry.js");
__webpack_require__(/*! /Users/kirill/Desktop/mirrorblocks/node_modules/@storybook/addon-actions/dist/esm/preset/addDecorator.js-generated-config-entry.js */"./node_modules/@storybook/addon-actions/dist/esm/preset/addDecorator.js-generated-config-entry.js");
__webpack_require__(/*! /Users/kirill/Desktop/mirrorblocks/node_modules/@storybook/addon-actions/dist/esm/preset/addArgs.js-generated-config-entry.js */"./node_modules/@storybook/addon-actions/dist/esm/preset/addArgs.js-generated-config-entry.js");
__webpack_require__(/*! /Users/kirill/Desktop/mirrorblocks/node_modules/@storybook/addon-backgrounds/dist/esm/preset/addDecorator.js-generated-config-entry.js */"./node_modules/@storybook/addon-backgrounds/dist/esm/preset/addDecorator.js-generated-config-entry.js");
__webpack_require__(/*! /Users/kirill/Desktop/mirrorblocks/node_modules/@storybook/addon-backgrounds/dist/esm/preset/addParameter.js-generated-config-entry.js */"./node_modules/@storybook/addon-backgrounds/dist/esm/preset/addParameter.js-generated-config-entry.js");
__webpack_require__(/*! /Users/kirill/Desktop/mirrorblocks/node_modules/@storybook/addon-measure/dist/esm/preset/addDecorator.js-generated-config-entry.js */"./node_modules/@storybook/addon-measure/dist/esm/preset/addDecorator.js-generated-config-entry.js");
__webpack_require__(/*! /Users/kirill/Desktop/mirrorblocks/node_modules/@storybook/addon-outline/dist/esm/preset/addDecorator.js-generated-config-entry.js */"./node_modules/@storybook/addon-outline/dist/esm/preset/addDecorator.js-generated-config-entry.js");
__webpack_require__(/*! /Users/kirill/Desktop/mirrorblocks/.storybook/preview.js-generated-config-entry.js */"./.storybook/preview.js-generated-config-entry.js");
module.exports = __webpack_require__(/*! /Users/kirill/Desktop/mirrorblocks/generated-stories-entry.js */"./generated-stories-entry.js");


/***/ }),

/***/ 1:
/*!********************************!*\
  !*** ./util.inspect (ignored) ***!
  \********************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

},[[0,"runtime~main","vendors~main"]]]);
//# sourceMappingURL=main.iframe.bundle.js.map