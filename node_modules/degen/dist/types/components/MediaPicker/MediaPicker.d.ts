import * as React from 'react';
import { FileInputProps } from '../FileInput';
declare type Image = 'image/jpeg' | 'image/png' | 'image/webp' | 'image/jpeg, image/png, image/webp';
declare type Video = 'image/gif' | 'video/mp4' | 'video/ogg' | 'video/webm' | 'image/gif, video/mp4, video/ogg, video/webm';
export declare type Accept = Image | Video | `${Image}, ${Video}`;
declare type BaseProps = {
    accept?: Accept;
    autoFocus?: FileInputProps['autoFocus'];
    defaultValue?: {
        name?: string;
        type: string;
        url: string;
    };
    disabled?: FileInputProps['disabled'];
    error?: boolean | React.ReactNode;
    id?: FileInputProps['id'];
    label: React.ReactNode;
    /** Size in megabytes */
    maxSize?: number;
    name?: string;
    required?: FileInputProps['required'];
    tabIndex?: FileInputProps['tabIndex'];
    uploaded?: boolean;
    uploading?: boolean;
    uploadProgress?: number;
    onBlur?: FileInputProps['onBlur'];
    onError?(error: string): void;
    onChange?: FileInputProps['onChange'];
    onFocus?: FileInputProps['onFocus'];
    onReset?: FileInputProps['onReset'];
};
declare type WithoutCompact = {
    compact?: never;
    cover?: boolean;
};
declare type WithCompact = {
    /** Show smaller input */
    compact?: boolean;
    cover?: never;
};
declare type Props = BaseProps & (WithCompact | WithoutCompact);
export declare const MediaPicker: {
    ({ accept, autoFocus, compact, cover, defaultValue, disabled, error, id, label, maxSize, name, required, tabIndex, uploaded, uploading, uploadProgress, onBlur, onChange, onError, onFocus, onReset, }: Props): JSX.Element;
    displayName: string;
};
export {};
